name: Flask CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: blogdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

      - name: Run user tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost/blogdb
        run: |
          . venv/bin/activate
          pytest tests/user_test.py --maxfail=1 --disable-warnings -q

      - name: Run post tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost/blogdb
        run: |
          . venv/bin/activate
          pytest tests/comment_test.py --maxfail=1 --disable-warnings -q

  build-and-push:
    needs: test 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/blog-backend:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/blog-backend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    
    steps:
    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: SSH into VPN Server using password
      run: |
        sshpass -p '${{ secrets.VM_VPN_PASS }}' ssh -o StrictHostKeyChecking=no "${{ secrets.VM_VPN }}" "
          
          sshpass -p '${{ secrets.VM_BACK_PASS }}' ssh -o StrictHostKeyChecking=no "${{ secrets.VM_BACK }}" '
            
            cd "${{ secrets.VM_PATH }}"
            
            docker compose down
            docker images -a | grep backend | awk '{print $3}' | xargs docker rmi -f
            docker compose up -d

          '
        "



        
